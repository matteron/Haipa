import { Tag } from '../../tag';
import { renderFns } from '../../renderFns';

declare module '../../tag' {
	export interface Tag {
		html(inner?: Tag): Tag;
		/// Document MetaData
		base(inner?: Tag): Tag;
		link(inner?: Tag): Tag;
		meta(inner?: Tag): Tag;
		head(inner?: Tag): Tag;
		// Sectioning Root
		body(inner?: Tag): Tag;
		// Content Sectioning
		address(inner?: Tag): Tag;
		article(inner?: Tag): Tag;
		aside(inner?: Tag): Tag;
		footer(inner?: Tag): Tag;
		header(inner?: Tag): Tag;
		h1(inner?: Tag): Tag;
		h2(inner?: Tag): Tag;
		h3(inner?: Tag): Tag;
		h4(inner?: Tag): Tag;
		h5(inner?: Tag): Tag;
		h6(inner?: Tag): Tag;
		// Text Content
		hgroup(inner?: Tag): Tag;
		main(inner?: Tag): Tag;
		nav(inner?: Tag): Tag;
		section(inner?: Tag): Tag;
		blockquote(inner?: Tag): Tag;
		dd(inner?: Tag): Tag;
		div(inner?: Tag): Tag;
		dl(inner?: Tag): Tag;
		dt(inner?: Tag): Tag;
		figcaption(inner?: Tag): Tag;
		figure(inner?: Tag): Tag;
		hr(inner?: Tag): Tag;
		li(inner?: Tag): Tag;
		ol(inner?: Tag): Tag;
		p(inner?: Tag): Tag;
		pre(inner?: Tag): Tag;
		ul(inner?: Tag): Tag;
		// Inline Text Semantics
		a(inner?: Tag): Tag;
		b(inner?: Tag): Tag;
		bdi(inner?: Tag): Tag;
		bdo(inner?: Tag): Tag;
		br(inner?: Tag): Tag;
		code(inner?: Tag): Tag;
		dfn(inner?: Tag): Tag;
		em(inner?: Tag): Tag;
		i(inner?: Tag): Tag;
		kbd(inner?: Tag): Tag;
		mark(inner?: Tag): Tag;
		q(inner?: Tag): Tag;
		rb(inner?: Tag): Tag;
		rp(inner?: Tag): Tag;
		rt(inner?: Tag): Tag;
		rtc(inner?: Tag): Tag;
		ruby(inner?: Tag): Tag;
		s(inner?: Tag): Tag;
		samp(inner?: Tag): Tag;
		small(inner?: Tag): Tag;
		strong(inner?: Tag): Tag;
		sub(inner?: Tag): Tag;
		sup(inner?: Tag): Tag;
		time(inner?: Tag): Tag;
		u(inner?: Tag): Tag;
		var(inner?: Tag): Tag;
		wbr(inner?: Tag): Tag;
		// Image and Multimedia
		area(inner?: Tag): Tag;
		audio(inner?: Tag): Tag;
		img(inner?: Tag): Tag;
		map(inner?: Tag): Tag;
		track(inner?: Tag): Tag;
		video(inner?: Tag): Tag;
		// Embedded Content
		embed(inner?: Tag): Tag;
		iframe(inner?: Tag): Tag;
		object(inner?: Tag): Tag;
		param(inner?: Tag): Tag;
		picture(inner?: Tag): Tag;
		source(inner?: Tag): Tag;
		// Scripting
		canvas(inner?: Tag): Tag;
		noscript(inner?: Tag): Tag;
		script(inner?: Tag): Tag;
		// Demarcating Edits
		del(inner?: Tag): Tag;
		ins(inner?: Tag): Tag;
		// Table Content
		caption(inner?: Tag): Tag;
		col(inner?: Tag): Tag;
		colgroup(inner?: Tag): Tag;
		table(inner?: Tag): Tag;
		tbody(inner?: Tag): Tag;
		td(inner?: Tag): Tag;
		tfoot(inner?: Tag): Tag;
		th(inner?: Tag): Tag;
		thead(inner?: Tag): Tag;
		tr(inner?: Tag): Tag;
		// Forms
		button(inner?: Tag): Tag;
		datalist(inner?: Tag): Tag;
		fieldset(inner?: Tag): Tag;
		input(inner?: Tag): Tag;
		legend(inner?: Tag): Tag;
		meter(inner?: Tag): Tag;
		optgroup(inner?: Tag): Tag;
		option(inner?: Tag): Tag;
		output(inner?: Tag): Tag;
		progress(inner?: Tag): Tag;
		select(inner?: Tag): Tag;
		textarea(inner?: Tag): Tag;
		// Interactive Elements
		details(inner?: Tag): Tag;
		dialog(inner?: Tag): Tag;
		menu(inner?: Tag): Tag;
		summary(inner?: Tag): Tag;
		// Web Components
		slot(inner?: Tag): Tag;
		template(inner?: Tag): Tag;
	}
}

Tag.prototype.html = function(inner?: Tag): Tag { return this.element('html', inner, renderFns.docType); };
Tag.prototype.base = function(inner?: Tag): Tag { return this.element('base', inner, renderFns.selfClosing) };
Tag.prototype.link = function(inner?: Tag): Tag { return this.element('link', inner, renderFns.selfClosing) };
Tag.prototype.meta = function(inner?: Tag): Tag { return this.element('meta', inner, renderFns.selfClosing) };
Tag.prototype.head = function(inner?: Tag): Tag { return this.element('head', inner) };
Tag.prototype.body = function(inner?: Tag): Tag { return this.element('body', inner) };
Tag.prototype.address = function(inner?: Tag): Tag { return this.element('address', inner) };
Tag.prototype.article = function(inner?: Tag): Tag { return this.element('article', inner) };
Tag.prototype.aside = function(inner?: Tag): Tag { return this.element('aside', inner) };
Tag.prototype.footer = function(inner?: Tag): Tag { return this.element('footer', inner) };
Tag.prototype.header = function(inner?: Tag): Tag { return this.element('header', inner) };
Tag.prototype.h1 = function(inner?: Tag): Tag { return this.element('h1', inner) };
Tag.prototype.h2 = function(inner?: Tag): Tag { return this.element('h2', inner) };
Tag.prototype.h3 = function(inner?: Tag): Tag { return this.element('h3', inner) };
Tag.prototype.h4 = function(inner?: Tag): Tag { return this.element('h4', inner) };
Tag.prototype.h5 = function(inner?: Tag): Tag { return this.element('h5', inner) };
Tag.prototype.h6 = function(inner?: Tag): Tag { return this.element('h6', inner) };
Tag.prototype.hgroup = function(inner?: Tag): Tag { return this.element('hgroup', inner) };
Tag.prototype.main = function(inner?: Tag): Tag { return this.element('main', inner) };
Tag.prototype.nav = function(inner?: Tag): Tag { return this.element('nav', inner) };
Tag.prototype.section = function(inner?: Tag): Tag { return this.element('section', inner) };
Tag.prototype.blockquote = function(inner?: Tag): Tag { return this.element('blockquote', inner) };
Tag.prototype.dd = function(inner?: Tag): Tag { return this.element('dd', inner) };
Tag.prototype.div = function(inner?: Tag): Tag { return this.element('div', inner) };
Tag.prototype.dl = function(inner?: Tag): Tag { return this.element('dl', inner) };
Tag.prototype.dt = function(inner?: Tag): Tag { return this.element('dt', inner) };
Tag.prototype.figcaption = function(inner?: Tag): Tag { return this.element('figcaption', inner) };
Tag.prototype.figure = function(inner?: Tag): Tag { return this.element('figure', inner) };
Tag.prototype.hr = function(inner?: Tag): Tag { return this.element('hr', inner, renderFns.selfClosing) };
Tag.prototype.li = function(inner?: Tag): Tag { return this.element('li', inner) };
Tag.prototype.ol = function(inner?: Tag): Tag { return this.element('ol', inner) };
Tag.prototype.p = function(inner?: Tag): Tag { return this.element('p', inner) };
Tag.prototype.pre = function(inner?: Tag): Tag { return this.element('pre', inner) };
Tag.prototype.ul = function(inner?: Tag): Tag { return this.element('ul', inner) };
Tag.prototype.a = function(inner?: Tag): Tag { return this.element('a', inner) };
Tag.prototype.b = function(inner?: Tag): Tag { return this.element('b', inner) };
Tag.prototype.bdi = function(inner?: Tag): Tag { return this.element('bdi', inner) };
Tag.prototype.bdo = function(inner?: Tag): Tag { return this.element('bdo', inner) };
Tag.prototype.br = function(inner?: Tag): Tag { return this.element('br', inner, renderFns.selfClosing) };
Tag.prototype.code = function(inner?: Tag): Tag { return this.element('code', inner) };
Tag.prototype.dfn = function(inner?: Tag): Tag { return this.element('dfn', inner) };
Tag.prototype.em = function(inner?: Tag): Tag { return this.element('em', inner) };
Tag.prototype.i = function(inner?: Tag): Tag { return this.element('i', inner) };
Tag.prototype.kbd = function(inner?: Tag): Tag { return this.element('kbd', inner) };
Tag.prototype.mark = function(inner?: Tag): Tag { return this.element('mark', inner) };
Tag.prototype.q = function(inner?: Tag): Tag { return this.element('q', inner) };
Tag.prototype.rb = function(inner?: Tag): Tag { return this.element('rb', inner) };
Tag.prototype.rp = function(inner?: Tag): Tag { return this.element('rp', inner) };
Tag.prototype.rt = function(inner?: Tag): Tag { return this.element('rt', inner) };
Tag.prototype.rtc = function(inner?: Tag): Tag { return this.element('rtc', inner) };
Tag.prototype.ruby = function(inner?: Tag): Tag { return this.element('ruby', inner) };
Tag.prototype.s = function(inner?: Tag): Tag { return this.element('s', inner) };
Tag.prototype.samp = function(inner?: Tag): Tag { return this.element('samp', inner) };
Tag.prototype.small = function(inner?: Tag): Tag { return this.element('small', inner) };
Tag.prototype.strong = function(inner?: Tag): Tag { return this.element('strong', inner) };
Tag.prototype.sub = function(inner?: Tag): Tag { return this.element('sub', inner) };
Tag.prototype.sup = function(inner?: Tag): Tag { return this.element('sup', inner) };
Tag.prototype.time = function(inner?: Tag): Tag { return this.element('time', inner) };
Tag.prototype.u = function(inner?: Tag): Tag { return this.element('u', inner) };
Tag.prototype.var = function(inner?: Tag): Tag { return this.element('var', inner) };
Tag.prototype.wbr = function(inner?: Tag): Tag { return this.element('wbr', inner) };
Tag.prototype.area = function(inner?: Tag): Tag { return this.element('area', inner, renderFns.selfClosing) };
Tag.prototype.audio = function(inner?: Tag): Tag { return this.element('audio', inner) };
Tag.prototype.img = function(inner?: Tag): Tag { return this.element('img', inner, renderFns.selfClosing) };
Tag.prototype.map = function(inner?: Tag): Tag { return this.element('map', inner) };
Tag.prototype.track = function(inner?: Tag): Tag { return this.element('track', inner, renderFns.selfClosing) };
Tag.prototype.video = function(inner?: Tag): Tag { return this.element('video', inner) };
Tag.prototype.embed = function(inner?: Tag): Tag { return this.element('embed', inner, renderFns.selfClosing) };
Tag.prototype.iframe = function(inner?: Tag): Tag { return this.element('iframe', inner, renderFns.selfClosing) };
Tag.prototype.object = function(inner?: Tag): Tag { return this.element('object', inner) };
Tag.prototype.param = function(inner?: Tag): Tag { return this.element('param', inner, renderFns.selfClosing) };
Tag.prototype.picture = function(inner?: Tag): Tag { return this.element('picture', inner) };
Tag.prototype.source = function(inner?: Tag): Tag { return this.element('source', inner, renderFns.selfClosing) };
Tag.prototype.canvas = function(inner?: Tag): Tag { return this.element('canvas', inner) };
Tag.prototype.noscript = function(inner?: Tag): Tag { return this.element('noscript', inner) };
Tag.prototype.script = function(inner?: Tag): Tag { return this.element('script', inner) };
Tag.prototype.del = function(inner?: Tag): Tag { return this.element('del', inner) };
Tag.prototype.ins = function(inner?: Tag): Tag { return this.element('ins', inner) };
Tag.prototype.caption = function(inner?: Tag): Tag { return this.element('caption', inner) };
Tag.prototype.col = function(inner?: Tag): Tag { return this.element('col', inner) };
Tag.prototype.colgroup = function(inner?: Tag): Tag { return this.element('colgroup', inner) };
Tag.prototype.table = function(inner?: Tag): Tag { return this.element('table', inner) };
Tag.prototype.tbody = function(inner?: Tag): Tag { return this.element('tbody', inner) };
Tag.prototype.td = function(inner?: Tag): Tag { return this.element('td', inner) };
Tag.prototype.tfoot = function(inner?: Tag): Tag { return this.element('tfoot', inner) };
Tag.prototype.th = function(inner?: Tag): Tag { return this.element('th', inner) };
Tag.prototype.thead = function(inner?: Tag): Tag { return this.element('thead', inner) };
Tag.prototype.tr = function(inner?: Tag): Tag { return this.element('tr', inner) };
Tag.prototype.button = function(inner?: Tag): Tag { return this.element('button', inner) };
Tag.prototype.datalist = function(inner?: Tag): Tag { return this.element('datalist', inner) };
Tag.prototype.fieldset = function(inner?: Tag): Tag { return this.element('fieldset', inner) };
Tag.prototype.input = function(inner?: Tag): Tag { return this.element('input', inner, renderFns.selfClosing) };
Tag.prototype.legend = function(inner?: Tag): Tag { return this.element('legend', inner) };
Tag.prototype.meter = function(inner?: Tag): Tag { return this.element('meter', inner) };
Tag.prototype.optgroup = function(inner?: Tag): Tag { return this.element('optgroup', inner) };
Tag.prototype.option = function(inner?: Tag): Tag { return this.element('option', inner) };
Tag.prototype.output = function(inner?: Tag): Tag { return this.element('output', inner) };
Tag.prototype.progress = function(inner?: Tag): Tag { return this.element('progress', inner) };
Tag.prototype.select = function(inner?: Tag): Tag { return this.element('select', inner) };
Tag.prototype.textarea = function(inner?: Tag): Tag { return this.element('textarea', inner) };
Tag.prototype.details = function(inner?: Tag): Tag { return this.element('details', inner) };
Tag.prototype.dialog = function(inner?: Tag): Tag { return this.element('dialog', inner) };
Tag.prototype.menu = function(inner?: Tag): Tag { return this.element('menu', inner) };
Tag.prototype.summary = function(inner?: Tag): Tag { return this.element('summary', inner) };
Tag.prototype.slot = function(inner?: Tag): Tag { return this.element('slot', inner) };
Tag.prototype.template = function(inner?: Tag): Tag { return this.element('template', inner) };
