import { Tag } from '../../tag';

declare module '../../tag' {
	export interface Tag {
        animate(inner?: Tag): Tag;
        animateMotion(inner?: Tag): Tag;
        animateTransform(inner?: Tag): Tag;
        circle(inner?: Tag): Tag;
        defs(inner?: Tag): Tag;
        desc(inner?: Tag): Tag;
        discard(inner?: Tag): Tag;
        ellipse(inner?: Tag): Tag;
        feBlend(inner?: Tag): Tag;
        feColorMatrix(inner?: Tag): Tag;
        feComponentTransfer(inner?: Tag): Tag;
        feComposite(inner?: Tag): Tag;
        feConvolveMatrix(inner?: Tag): Tag;
        feDiffuseLighting(inner?: Tag): Tag;
        feDisplacementMap(inner?: Tag): Tag;
        feDistantLight(inner?: Tag): Tag;
        feDropShadow(inner?: Tag): Tag;
        feFlood(inner?: Tag): Tag;
        feFuncA(inner?: Tag): Tag;
        feFuncB(inner?: Tag): Tag;
        feFuncG(inner?: Tag): Tag;
        feFuncR(inner?: Tag): Tag;
        feGaussianBlur(inner?: Tag): Tag;
        feImage(inner?: Tag): Tag;
        feMerge(inner?: Tag): Tag;
        feMergeNode(inner?: Tag): Tag;
        feMorphology(inner?: Tag): Tag;
        feOffset(inner?: Tag): Tag;
        fePointLight(inner?: Tag): Tag;
        feSpecularLighting(inner?: Tag): Tag;
        feSpotLight(inner?: Tag): Tag;
        feTile(inner?: Tag): Tag;
        feTurbulence(inner?: Tag): Tag;
        foreignObject(inner?: Tag): Tag;
        g(inner?: Tag): Tag;
        hatch(inner?: Tag): Tag;
        hatchpath(inner?: Tag): Tag;
        image(inner?: Tag): Tag;
        line(inner?: Tag): Tag;
        linearGradient(inner?: Tag): Tag;
        marker(inner?: Tag): Tag;
        mesh(inner?: Tag): Tag;
        meshgradient(inner?: Tag): Tag;
        meshpatch(inner?: Tag): Tag;
        meshrow(inner?: Tag): Tag;
        metadata(inner?: Tag): Tag;
        mpath(inner?: Tag): Tag;
        path(inner?: Tag): Tag;
        polygon(inner?: Tag): Tag;
        polyline(inner?: Tag): Tag;
        radialGradient(inner?: Tag): Tag;
        rect(inner?: Tag): Tag;
        script(inner?: Tag): Tag;
        set(inner?: Tag): Tag;
        solidcolor(inner?: Tag): Tag;
        stop(inner?: Tag): Tag;
        svg(inner?: Tag): Tag;
        switch(inner?: Tag): Tag;
        symbol(inner?: Tag): Tag;
        text(inner?: Tag): Tag;
        textPath(inner?: Tag): Tag;
        tspan(inner?: Tag): Tag;
        unknown(inner?: Tag): Tag;
        use(inner?: Tag): Tag;
        view(inner?: Tag): Tag;
    }
}

Tag.prototype.animate = function(inner?: Tag): Tag { return this.element('animate', inner) };
Tag.prototype.animateMotion = function(inner?: Tag): Tag { return this.element('animateMotion', inner) };
Tag.prototype.animateTransform = function(inner?: Tag): Tag { return this.element('animateTransform', inner) };
Tag.prototype.circle = function(inner?: Tag): Tag { return this.element('circle', inner) };
Tag.prototype.defs = function(inner?: Tag): Tag { return this.element('defs', inner) };
Tag.prototype.desc = function(inner?: Tag): Tag { return this.element('desc', inner) };
Tag.prototype.discard = function(inner?: Tag): Tag { return this.element('discard', inner) };
Tag.prototype.ellipse = function(inner?: Tag): Tag { return this.element('ellipse', inner) };
Tag.prototype.feBlend = function(inner?: Tag): Tag { return this.element('feBlend', inner) };
Tag.prototype.feColorMatrix = function(inner?: Tag): Tag { return this.element('feColorMatrix', inner) };
Tag.prototype.feComponentTransfer = function(inner?: Tag): Tag { return this.element('feComponentTransfer', inner) };
Tag.prototype.feComposite = function(inner?: Tag): Tag { return this.element('feComposite', inner) };
Tag.prototype.feConvolveMatrix = function(inner?: Tag): Tag { return this.element('feConvolveMatrix', inner) };
Tag.prototype.feDiffuseLighting = function(inner?: Tag): Tag { return this.element('feDiffuseLighting', inner) };
Tag.prototype.feDisplacementMap = function(inner?: Tag): Tag { return this.element('feDisplacementMap', inner) };
Tag.prototype.feDistantLight = function(inner?: Tag): Tag { return this.element('feDistantLight', inner) };
Tag.prototype.feDropShadow = function(inner?: Tag): Tag { return this.element('feDropShadow', inner) };
Tag.prototype.feFlood = function(inner?: Tag): Tag { return this.element('feFlood', inner) };
Tag.prototype.feFuncA = function(inner?: Tag): Tag { return this.element('feFuncA', inner) };
Tag.prototype.feFuncB = function(inner?: Tag): Tag { return this.element('feFuncB', inner) };
Tag.prototype.feFuncG = function(inner?: Tag): Tag { return this.element('feFuncG', inner) };
Tag.prototype.feFuncR = function(inner?: Tag): Tag { return this.element('feFuncR', inner) };
Tag.prototype.feGaussianBlur = function(inner?: Tag): Tag { return this.element('feGaussianBlur', inner) };
Tag.prototype.feImage = function(inner?: Tag): Tag { return this.element('feImage', inner) };
Tag.prototype.feMerge = function(inner?: Tag): Tag { return this.element('feMerge', inner) };
Tag.prototype.feMergeNode = function(inner?: Tag): Tag { return this.element('feMergeNode', inner) };
Tag.prototype.feMorphology = function(inner?: Tag): Tag { return this.element('feMorphology', inner) };
Tag.prototype.feOffset = function(inner?: Tag): Tag { return this.element('feOffset', inner) };
Tag.prototype.fePointLight = function(inner?: Tag): Tag { return this.element('fePointLight', inner) };
Tag.prototype.feSpecularLighting = function(inner?: Tag): Tag { return this.element('feSpecularLighting', inner) };
Tag.prototype.feSpotLight = function(inner?: Tag): Tag { return this.element('feSpotLight', inner) };
Tag.prototype.feTile = function(inner?: Tag): Tag { return this.element('feTile', inner) };
Tag.prototype.feTurbulence = function(inner?: Tag): Tag { return this.element('feTurbulence', inner) };
Tag.prototype.foreignObject = function(inner?: Tag): Tag { return this.element('foreignObject', inner) };
Tag.prototype.g = function(inner?: Tag): Tag { return this.element('g', inner) };
Tag.prototype.hatch = function(inner?: Tag): Tag { return this.element('hatch', inner) };
Tag.prototype.hatchpath = function(inner?: Tag): Tag { return this.element('hatchpath', inner) };
Tag.prototype.image = function(inner?: Tag): Tag { return this.element('image', inner) };
Tag.prototype.line = function(inner?: Tag): Tag { return this.element('line', inner) };
Tag.prototype.linearGradient = function(inner?: Tag): Tag { return this.element('linearGradient', inner) };
Tag.prototype.marker = function(inner?: Tag): Tag { return this.element('marker', inner) };
Tag.prototype.mesh = function(inner?: Tag): Tag { return this.element('mesh', inner) };
Tag.prototype.meshgradient = function(inner?: Tag): Tag { return this.element('meshgradient', inner) };
Tag.prototype.meshpatch = function(inner?: Tag): Tag { return this.element('meshpatch', inner) };
Tag.prototype.meshrow = function(inner?: Tag): Tag { return this.element('meshrow', inner) };
Tag.prototype.metadata = function(inner?: Tag): Tag { return this.element('metadata', inner) };
Tag.prototype.mpath = function(inner?: Tag): Tag { return this.element('mpath', inner) };
Tag.prototype.polygon = function(inner?: Tag): Tag { return this.element('polygon', inner) };
Tag.prototype.polyline = function(inner?: Tag): Tag { return this.element('polyline', inner) };
Tag.prototype.radialGradient = function(inner?: Tag): Tag { return this.element('radialGradient', inner) };
Tag.prototype.rect = function(inner?: Tag): Tag { return this.element('rect', inner) };
Tag.prototype.script = function(inner?: Tag): Tag { return this.element('script', inner) };
Tag.prototype.set = function(inner?: Tag): Tag { return this.element('set', inner) };
Tag.prototype.solidcolor = function(inner?: Tag): Tag { return this.element('solidcolor', inner) };
Tag.prototype.stop = function(inner?: Tag): Tag { return this.element('stop', inner) };
Tag.prototype.svg = function(inner?: Tag): Tag { return this.element('svg', inner) };
Tag.prototype.switch = function(inner?: Tag): Tag { return this.element('switch', inner) };
Tag.prototype.symbol = function(inner?: Tag): Tag { return this.element('symbol', inner) };
Tag.prototype.text = function(inner?: Tag): Tag { return this.element('text', inner) };
Tag.prototype.textPath = function(inner?: Tag): Tag { return this.element('textPath', inner) };
Tag.prototype.tspan = function(inner?: Tag): Tag { return this.element('tspan', inner) };
Tag.prototype.unknown = function(inner?: Tag): Tag { return this.element('unknown', inner) };
Tag.prototype.use = function(inner?: Tag): Tag { return this.element('use', inner) };
Tag.prototype.view = function(inner?: Tag): Tag { return this.element('view', inner) };